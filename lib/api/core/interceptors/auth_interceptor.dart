import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:treemov/data/local/storage_repository.dart';

class AuthInterceptor extends Interceptor {
  final StorageRepository storageRepository;

  AuthInterceptor({required this.storageRepository});

  @override
  Future<void> onRequest(
    RequestOptions options,
    RequestInterceptorHandler handler,
  ) async {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (!_isAuthEndpoint(options.path)) {
      try {
        final token = await storageRepository.getAccessToken();

        if (token != null && token.isNotEmpty) {
          options.headers['Authorization'] = 'Bearer $token';
          debugPrint('‚úÖ Token added to request: ${options.path}');
        } else {
          debugPrint('‚ö†Ô∏è No token available for request: ${options.path}');
        }
      } catch (e) {
        debugPrint('‚ùå Error getting token: $e');
      }
    }

    return handler.next(options);
  }

  @override
  Future<void> onResponse(
    Response response,
    ResponseInterceptorHandler handler,
  ) async {
    debugPrint(
      '‚úÖ Response ${response.statusCode}: ${response.requestOptions.path}',
    );
    return handler.next(response);
  }

  @override
  Future<void> onError(
    DioException err,
    ErrorInterceptorHandler handler,
  ) async {
    debugPrint('‚ùå Dio Error: ${err.type} - ${err.message}');
    debugPrint('‚ùå Path: ${err.requestOptions.path}');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 401 (Unauthorized)
    if (err.response?.statusCode == 401) {
      debugPrint('üîÑ Token expired');

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      // await _refreshTokenAndRetry(err, handler);
      // return;
    }

    return handler.next(err);
  }

  bool _isAuthEndpoint(String path) {
    return path.contains('/token') ||
        path.contains('/auth/sign_up') ||
        path.contains('/auth/confirm_sign_up');
  }
}
